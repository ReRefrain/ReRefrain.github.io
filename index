<!doctype html>
<html lang="zh-CN">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>牛顿分形</title>
  <style>
    .text-center{text-align:center;}
    body {background: #111;color:#fff}
    canvas {background: #fff;display:block;margin:1em auto}
    input,button {font-size: 1em}
  </style>
  </head>
  <body>
  <script src="https://unpkg.com/mathjs@14.5.0/lib/browser/math.js"></script>
    <div class="text-center">
      <p><strong>牛顿分形</strong></p>
      多项式（建议次数不超过<em>5</em>）<br>
      <input id="coeffs" value="1,0,0,-1" size="15">
      <button onclick="draw()">绘制分形</button><br>
      说明：系数按次数由高到低，以半角,分隔，如(x^3-1)输入1,0,0,-1，切忌输入空格！<br>
      下图仅绘制[-5,5]x[-5i,+5i]的复平面<br>
      多项式次数越高，绘制时间越长，请耐心等待
    </div>
    <canvas id="fractal" width="800" height="800" style="width: 500px; height: 500px; border: 1px solid #ccc;"></canvas>
    <script>
      //参数设置
      const width=800,height=800;
      const re_min=-5,re_max=5,im_min=-5,im_max=5;
      const maxIter=200,tol=1e-6,rootTol=1e-5;
      //读取输入
      function draw(){
        let ptxt=document.getElementById('coeffs').value.trim();
        let coeffs=ptxt.split(',').map(s=>math.complex(s));
        if(coeffs.length<2){
          alert('请勿输入常数多项式');
          return;
        }
        if(coeffs.length>7){
          alert('次数过高，请重新输入')
          return;
        }
        let expr=ArrayToExpr(coeffs);
        let f=math.compile(expr);
        let df=math.derivative(expr,'x').compile();
        f.coeffs=coeffs;
        //求多项式的根
        let roots=Roots(f,df)
        //准备canvas
        let canvas=document.getElementById('fractal');
        let ctx=canvas.getContext('2d');
        let img=ctx.createImageData(width,height);
        //对像素点涂染
        let rootColors = [
          [255,0,0],[0,255,0],[0,0,255],[255,255,0],[255,0,255],[0,255,255]
        ];
        let vx=(re_max-re_min)/(width-1);
        let vy=(im_max-im_min)/(height-1);
        let v=math.abs(math.complex(vx,vy))
        for(let i=0;i<height;i++){
          let y=im_min+i*vy;
          for(let j=0;j<width;j++){
            let x=re_min+j*vx;
            let z=math.complex(x,y)
            let color=[255,255,255];
            let n=Newton(f,df,z);
            let nr=check(roots,n);
            if(n!==null){
              color=rootColors[nr%rootColors.length];
            }
            if(roots.some(r=>math.abs(math.subtract(z,r))<2*v)){
              color=[0,0,0]
            }
            let offset=4*(j+i*width);
            img.data[offset]=color[0];
            img.data[offset+1]=color[1];
            img.data[offset+2]=color[2];
            img.data[offset+3]=255;     
          }
        }
        ctx.putImageData(img,0,0);
      }
      //系数数组到多项式
      function ArrayToExpr(c){
          let expr='';
          for(let i=0;i<c.length;i++){
            if(math.abs(c[i])<tol){continue;}
            else{
                expr+='+'
                expr+='('+c[i]+')'
                let v=(c.length-1-i)===0?'':(c.length-1-i)===1?'*x':`*x^${c.length-1-i}`;
                expr+=v;
            }
        }
        expr=expr.slice(1);
        return expr;
    }
      //牛顿法求极限
      function Newton(f,df,z){
        for(let i=0;i<50;i++){
          let fz=f.evaluate({x:z});
          let dfz=df.evaluate({x:z});
        if(math.abs(dfz)<tol||i===maxIter-1){
          return null;
        }
        let m=math.divide(fz,dfz);
        z=math.subtract(z,m);
        if(math.abs(m)<tol){
          return z;
        }
      }
    }
    //数值方法求多项式的根（其实就是上述牛顿法）
    function Roots(f,df){
      let roots=[]
      for(let i=0;i<maxIter;i++){
        let z=math.complex(Math.random()*10-5,Math.random()*10-5);
        let root=Newton(f,df,z);
        if(root&&!roots.some(r=>math.abs(math.subtract(root,r))<rootTol)){
          roots.push(root);
        }
        if(roots.length===f.coeffs.length-1){break;}
      }
      return roots;
    }
    //对应极限和已知解
    function check(r,z){
      if(!z){return null;}
      return r.findIndex(root => math.abs(math.subtract(root, z)) < rootTol);
    }
    </script>
    </body>
</html>
